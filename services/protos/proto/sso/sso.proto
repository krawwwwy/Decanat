syntax = "proto3";

package auth;

import "google/protobuf/empty.proto";

option go_package = "krawwwwy.sso.v1;sso";

service Auth {
    // Пользователь отправляет заявку на регистрацию
    rpc RegisterPending(RegisterPendingRequest) returns (RegisterPendingResponse);

    // Получить список неподтверждённых пользователей
    rpc GetPendingList(google.protobuf.Empty) returns (GetPendingListResponse);

    // Удалить неподтверждённого пользователя
    rpc DeletePendingUser(DeletePendingUserRequest) returns (google.protobuf.Empty);

    // Подтвердить регистрацию (перевод из Redis в БД)
    rpc ApprovePendingUser(ApprovePendingUserRequest) returns (google.protobuf.Empty);

    // Авторизация
    rpc Login(LoginRequest) returns (LoginResponse);

    // Удаление пользователя (из основной БД)
    rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);

    // Списки пользователей
    rpc GetStudentsList(google.protobuf.Empty) returns (GetStudentsListResponse);
    rpc GetTeachersList(google.protobuf.Empty) returns (GetTeachersListResponse);
    rpc GetAdminsList(google.protobuf.Empty) returns (GetAdminsListResponse);

    // Проверка роли
    rpc IsTeacher(IsTeacherRequest) returns (IsTeacherResponse);
    rpc IsAdmin(IsAdminRequest) returns (IsAdminResponse);
    rpc IsStudent(IsStudentRequest) returns (IsStudentResponse);
}

// ------------------------
// Общие структуры
// ------------------------

message Date {
    int32 year = 1;
    int32 month = 2;
    int32 day = 3;
}

message UserBody {
    string email = 1;
    string password = 2;
    string name = 3;
    string surname = 4;
    string middle_name = 5;
    string phone_number = 6;
    Date birth_date = 7;
}

message StudentBody {
    UserBody user_info = 1;
    string group = 2;
    string student_number = 3;
}

message TeacherBody {
    UserBody user_info = 1;
    string title = 2;
    string department = 3;
    string degree = 4;
}

message AdminBody {
    string email = 1;
    string password = 2;
}

// ------------------------
// Pending регистрация
// ------------------------

message PendingUser {
    UserBody user_info = 1;
    string role = 2;
    map<string, string> meta = 3;
}

message RegisterPendingRequest {
    PendingUser info = 1;
}

message RegisterPendingResponse {
    string user_id = 1;
}

message GetPendingListResponse {
    repeated PendingUser users = 1;
}

message DeletePendingUserRequest {
    string user_id = 1;
}

message ApprovePendingUserRequest {
    string user_id = 1;
}

// ------------------------
// Авторизация
// ------------------------

message LoginRequest {
    string email = 1;
    string password = 2;
    string role = 3;
}

message LoginResponse {
    string token = 1;
}

// ------------------------
// Удаление и списки
// ------------------------

message DeleteUserRequest {
    int64 user_id = 1;
    string role = 2;
}

message GetStudentsListResponse {
    repeated StudentBody students = 1;
}

message GetTeachersListResponse {
    repeated TeacherBody teachers = 1;
}

message GetAdminsListResponse {
    repeated AdminBody admins = 1;
}

// ------------------------
// Проверка ролей
// ------------------------

message IsAdminRequest {
    int64 user_id = 1;
}

message IsAdminResponse {
    bool is_admin = 1;
}

message IsTeacherRequest {
    int64 user_id = 1;
}

message IsTeacherResponse {
    bool is_teacher = 1;
}

message IsStudentRequest {
    int64 user_id = 1;
}

message IsStudentResponse {
    bool is_student = 1;
}
