// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: sso/sso.proto

package sso

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Auth_RegisterPending_FullMethodName    = "/auth.Auth/RegisterPending"
	Auth_GetPendingList_FullMethodName     = "/auth.Auth/GetPendingList"
	Auth_DeletePendingUser_FullMethodName  = "/auth.Auth/DeletePendingUser"
	Auth_ApprovePendingUser_FullMethodName = "/auth.Auth/ApprovePendingUser"
	Auth_Login_FullMethodName              = "/auth.Auth/Login"
	Auth_DeleteUser_FullMethodName         = "/auth.Auth/DeleteUser"
	Auth_GetStudentsList_FullMethodName    = "/auth.Auth/GetStudentsList"
	Auth_GetTeachersList_FullMethodName    = "/auth.Auth/GetTeachersList"
	Auth_GetAdminsList_FullMethodName      = "/auth.Auth/GetAdminsList"
	Auth_IsTeacher_FullMethodName          = "/auth.Auth/IsTeacher"
	Auth_IsAdmin_FullMethodName            = "/auth.Auth/IsAdmin"
	Auth_IsStudent_FullMethodName          = "/auth.Auth/IsStudent"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// Пользователь отправляет заявку на регистрацию
	RegisterPending(ctx context.Context, in *RegisterPendingRequest, opts ...grpc.CallOption) (*RegisterPendingResponse, error)
	// Получить список неподтверждённых пользователей
	GetPendingList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPendingListResponse, error)
	// Удалить неподтверждённого пользователя
	DeletePendingUser(ctx context.Context, in *DeletePendingUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Подтвердить регистрацию (перевод из Redis в БД)
	ApprovePendingUser(ctx context.Context, in *ApprovePendingUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Авторизация
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Удаление пользователя (из основной БД)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Списки пользователей
	GetStudentsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentsListResponse, error)
	GetTeachersList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTeachersListResponse, error)
	GetAdminsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAdminsListResponse, error)
	// Проверка роли
	IsTeacher(ctx context.Context, in *IsTeacherRequest, opts ...grpc.CallOption) (*IsTeacherResponse, error)
	IsAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error)
	IsStudent(ctx context.Context, in *IsStudentRequest, opts ...grpc.CallOption) (*IsStudentResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) RegisterPending(ctx context.Context, in *RegisterPendingRequest, opts ...grpc.CallOption) (*RegisterPendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPendingResponse)
	err := c.cc.Invoke(ctx, Auth_RegisterPending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetPendingList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPendingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPendingListResponse)
	err := c.cc.Invoke(ctx, Auth_GetPendingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeletePendingUser(ctx context.Context, in *DeletePendingUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Auth_DeletePendingUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ApprovePendingUser(ctx context.Context, in *ApprovePendingUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Auth_ApprovePendingUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Auth_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Auth_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetStudentsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStudentsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentsListResponse)
	err := c.cc.Invoke(ctx, Auth_GetStudentsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetTeachersList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTeachersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeachersListResponse)
	err := c.cc.Invoke(ctx, Auth_GetTeachersList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAdminsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAdminsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdminsListResponse)
	err := c.cc.Invoke(ctx, Auth_GetAdminsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) IsTeacher(ctx context.Context, in *IsTeacherRequest, opts ...grpc.CallOption) (*IsTeacherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsTeacherResponse)
	err := c.cc.Invoke(ctx, Auth_IsTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) IsAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsAdminResponse)
	err := c.cc.Invoke(ctx, Auth_IsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) IsStudent(ctx context.Context, in *IsStudentRequest, opts ...grpc.CallOption) (*IsStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsStudentResponse)
	err := c.cc.Invoke(ctx, Auth_IsStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility.
type AuthServer interface {
	// Пользователь отправляет заявку на регистрацию
	RegisterPending(context.Context, *RegisterPendingRequest) (*RegisterPendingResponse, error)
	// Получить список неподтверждённых пользователей
	GetPendingList(context.Context, *emptypb.Empty) (*GetPendingListResponse, error)
	// Удалить неподтверждённого пользователя
	DeletePendingUser(context.Context, *DeletePendingUserRequest) (*emptypb.Empty, error)
	// Подтвердить регистрацию (перевод из Redis в БД)
	ApprovePendingUser(context.Context, *ApprovePendingUserRequest) (*emptypb.Empty, error)
	// Авторизация
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Удаление пользователя (из основной БД)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// Списки пользователей
	GetStudentsList(context.Context, *emptypb.Empty) (*GetStudentsListResponse, error)
	GetTeachersList(context.Context, *emptypb.Empty) (*GetTeachersListResponse, error)
	GetAdminsList(context.Context, *emptypb.Empty) (*GetAdminsListResponse, error)
	// Проверка роли
	IsTeacher(context.Context, *IsTeacherRequest) (*IsTeacherResponse, error)
	IsAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error)
	IsStudent(context.Context, *IsStudentRequest) (*IsStudentResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServer struct{}

func (UnimplementedAuthServer) RegisterPending(context.Context, *RegisterPendingRequest) (*RegisterPendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPending not implemented")
}
func (UnimplementedAuthServer) GetPendingList(context.Context, *emptypb.Empty) (*GetPendingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingList not implemented")
}
func (UnimplementedAuthServer) DeletePendingUser(context.Context, *DeletePendingUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePendingUser not implemented")
}
func (UnimplementedAuthServer) ApprovePendingUser(context.Context, *ApprovePendingUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovePendingUser not implemented")
}
func (UnimplementedAuthServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthServer) GetStudentsList(context.Context, *emptypb.Empty) (*GetStudentsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsList not implemented")
}
func (UnimplementedAuthServer) GetTeachersList(context.Context, *emptypb.Empty) (*GetTeachersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeachersList not implemented")
}
func (UnimplementedAuthServer) GetAdminsList(context.Context, *emptypb.Empty) (*GetAdminsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminsList not implemented")
}
func (UnimplementedAuthServer) IsTeacher(context.Context, *IsTeacherRequest) (*IsTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTeacher not implemented")
}
func (UnimplementedAuthServer) IsAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdmin not implemented")
}
func (UnimplementedAuthServer) IsStudent(context.Context, *IsStudentRequest) (*IsStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStudent not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}
func (UnimplementedAuthServer) testEmbeddedByValue()              {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	// If the following call pancis, it indicates UnimplementedAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_RegisterPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RegisterPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RegisterPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RegisterPending(ctx, req.(*RegisterPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetPendingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetPendingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetPendingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetPendingList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeletePendingUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePendingUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeletePendingUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeletePendingUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeletePendingUser(ctx, req.(*DeletePendingUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ApprovePendingUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovePendingUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ApprovePendingUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ApprovePendingUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ApprovePendingUser(ctx, req.(*ApprovePendingUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetStudentsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetStudentsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetStudentsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetStudentsList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetTeachersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetTeachersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetTeachersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetTeachersList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAdminsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAdminsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetAdminsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAdminsList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_IsTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).IsTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_IsTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).IsTeacher(ctx, req.(*IsTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_IsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).IsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_IsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).IsAdmin(ctx, req.(*IsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_IsStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).IsStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_IsStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).IsStudent(ctx, req.(*IsStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPending",
			Handler:    _Auth_RegisterPending_Handler,
		},
		{
			MethodName: "GetPendingList",
			Handler:    _Auth_GetPendingList_Handler,
		},
		{
			MethodName: "DeletePendingUser",
			Handler:    _Auth_DeletePendingUser_Handler,
		},
		{
			MethodName: "ApprovePendingUser",
			Handler:    _Auth_ApprovePendingUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Auth_DeleteUser_Handler,
		},
		{
			MethodName: "GetStudentsList",
			Handler:    _Auth_GetStudentsList_Handler,
		},
		{
			MethodName: "GetTeachersList",
			Handler:    _Auth_GetTeachersList_Handler,
		},
		{
			MethodName: "GetAdminsList",
			Handler:    _Auth_GetAdminsList_Handler,
		},
		{
			MethodName: "IsTeacher",
			Handler:    _Auth_IsTeacher_Handler,
		},
		{
			MethodName: "IsAdmin",
			Handler:    _Auth_IsAdmin_Handler,
		},
		{
			MethodName: "IsStudent",
			Handler:    _Auth_IsStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/sso.proto",
}
